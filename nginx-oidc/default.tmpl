# default.tmpl
#
# This is a templated file, `envsubst` is used to replace env vars in the format $VARIABLE and ${VARIABLE}
# To escape a dollar sign use ${DOLLAR}
#
# This file is installed to:
#   `/etc/nginx/conf.d/default.conf`
#
# It tracks the `server` section of the upstream OpenResty's `nginx.conf`
#
# This config (and any other configs in `etc/nginx/conf.d/`) are loaded by
# default by the `include` directive in `/usr/local/openresty/nginx/conf/nginx.conf`
# See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files
#
# OWASP hardening recommendations are applied
# See https://www.owasp.org/index.php/SCG_WS_nginx
# authenticates clients and serves html
server {

  server_name ${DOLLAR}hostname;

  listen 443 ssl;

  ssl_certificate     /usr/local/openresty/nginx/ssl/tls.crt;
  ssl_certificate_key /usr/local/openresty/nginx/ssl/tls.key;
  root /usr/local/openresty/nginx/html;

  # owasp hardening recommendations
  # https://www.owasp.org/index.php/SCG_WS_nginx

  # SSL protocols TLS v1~TLSv1.2 are allowed. Disabed SSLv3
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

  # enables server-side protection from BEAST attacks
  ssl_prefer_server_ciphers on;

  # disabled insecure ciphers suite. For example, MD5, DES, RC4, PSK
  ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4:@STRENGTH";

  client_body_buffer_size   100K;
  client_header_buffer_size 1k;
  client_max_body_size      100k;
  # increased value from owasp recommendation to allow for openid connect cookie
  large_client_header_buffers 4 8k;

  set ${DOLLAR}session_secret "${SESSION_SECRET}";

  location / {

    access_by_lua_block {

      local openidc = require("resty.openidc")
      openidc.set_logging(nil, { DEBUG = ngx.INFO })

      local opts = {
        redirect_uri = "${REDIRECT_URI}",
        discovery = "${DISCOVERY_URI}",
        client_id = "${CLIENT_ID}",
        client_secret = "${CLIENT_SECRET}",
        ssl_verify = "${SSL_VERIFY}",
        logout_path = "${LOGOUT_PATH}",
        redirect_after_logout_uri = "${LOGOUT_REDIRECT_URI}",
        redirect_after_logout_with_id_token_hint = "${LOGOUT_WITH_ID_TOKEN_HINT}"
      }

      -- call authenticate for OpenID Connect user authentication
      local res, err = require("resty.openidc").authenticate(opts)

      if err then
        ngx.status = 500
        ngx.say(err)
        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
      end
    }
    expires           0;
    add_header        Cache-Control private;
  }
}
