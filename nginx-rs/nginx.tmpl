# nginx.tmpl
#
# This is a templated file, `envsubst` is used to replace env vars in the format $VARIABLE and ${VARIABLE}
# To escape a dollar sign use ${DOLLAR}
#
# This file is installed to: `/usr/local/openresty/nginx/conf/nginx.conf`
# and is the file loaded by nginx at startup
#
# It tracks the upstream OpenResty's `nginx.conf`, but removes the `server`
# section and adds this directive: `include /etc/nginx/conf.d/*.conf;`
#
# The `docker-openresty` file `nginx.vh.default.conf` is copied to `/etc/nginx/conf.d/default.conf`
# It contains the `server` section of the upstream `nginx.conf`
# See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files
#
# OWASP hardening recommendations are applied
# See https://www.owasp.org/index.php/SCG_WS_nginx

worker_processes  1;

error_log  logs/error.log ${ERROR_LOG_LEVEL};

events {
  worker_connections  1024;
}

http {
  include       mime.types;
  default_type  application/octet-stream;

  log_format  main  '${DOLLAR}remote_addr - ${DOLLAR}remote_user [${DOLLAR}time_local] "${DOLLAR}request" '
                    '${DOLLAR}status ${DOLLAR}body_bytes_sent "${DOLLAR}http_referer" '
                    '"${DOLLAR}http_user_agent" "${DOLLAR}http_x_forwarded_for"';

  access_log  logs/access.log  main;

  sendfile        on;

  server_tokens         off;
  client_body_timeout   10;
  client_header_timeout 10;
  keepalive_timeout     5 5;
  send_timeout          10;

  # common lua configuration
  lua_package_path '~/lua/?.lua;;';

  # lua-resty-openidc configuration
  # https://github.com/zmartzone/lua-resty-openidc
  lua_ssl_trusted_certificate ${LUA_SSL_TRUSTED_CERTIFICATE};
  lua_ssl_verify_depth        5;
  lua_shared_dict discovery   1m;
  lua_shared_dict jwks        1m;

  # nginx-lua-prometheus config
  # https://github.com/knyar/nginx-lua-prometheus
  lua_shared_dict prometheus_metrics 10M;
  init_by_lua '
    prometheus = require("prometheus").init("prometheus_metrics")
    metric_requests = prometheus:counter("nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
    metric_latency = prometheus:histogram("nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
    metric_connections = prometheus:gauge("nginx_http_connections", "Number of HTTP connections", {"state"})
  ';
  log_by_lua '
    metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})
    metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
  ';

  include /etc/nginx/conf.d/*.conf;
}
